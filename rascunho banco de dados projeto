import sqlite3

class Cliente:
    def __init__(self, nome, telefone):
        self.nome = nome
        self.telefone = telefone

    def __str__(self):
        return f"{self.nome} - {self.telefone}"


class Barbearia:
    def __init__(self):
        self.conn = sqlite3.connect('barbearia.db')
        self.create_tables()

    def create_tables(self):
        with self.conn:
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS clientes (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nome TEXT NOT NULL,
                    telefone TEXT NOT NULL
                )
            ''')
            self.conn.execute('''
                CREATE TABLE IF NOT EXISTS agendamentos (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    cliente_id INTEGER,
                    data_hora TEXT NOT NULL,
                    FOREIGN KEY (cliente_id) REFERENCES clientes (id)
                )
            ''')

    def cadastrar_cliente(self, nome, telefone):
        with self.conn:
            self.conn.execute('INSERT INTO clientes (nome, telefone) VALUES (?, ?)', (nome, telefone))
        print(f"Cliente {nome} cadastrado com sucesso!")

    def listar_clientes(self):
        cursor = self.conn.execute('SELECT nome, telefone FROM clientes')
        clientes = cursor.fetchall()
        if not clientes:
            print("Nenhum cliente cadastrado.")
            return
        print("Clientes cadastrados:")
        for nome, telefone in clientes:
            print(f"{nome} - {telefone}")

    def agendar_atendimento(self, nome_cliente, data_hora):
        cursor = self.conn.execute('SELECT id FROM clientes WHERE nome = ?', (nome_cliente,))
        cliente = cursor.fetchone()
        if cliente:
            cliente_id = cliente[0]
            with self.conn:
                self.conn.execute('INSERT INTO agendamentos (cliente_id, data_hora) VALUES (?, ?)', (cliente_id, data_hora))
            print(f"Atendimento agendado para {nome_cliente} em {data_hora}.")
        else:
            print(f"Cliente {nome_cliente} n√£o encontrado.")

    def listar_agendamentos(self):
        cursor = self.conn.execute('''
            SELECT a.data_hora, c.nome, c.telefone FROM agendamentos a
            JOIN clientes c ON a.cliente_id = c.id
        ''')
        agendamentos = cursor.fetchall()
        if not agendamentos:
            print("Nenhum atendimento agendado.")
            return
        print("Atendimentos agendados:")
        for data_hora, nome, telefone in agendamentos:
            print(f"{data_hora}: {nome} - {telefone}")

    def close(self):
      


